plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    querydslVersion = "5.1.0" // ✅ Use latest with Jakarta support
    hibernateVersion = "6.6.11.Final"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // PostgreSQL driver
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.1'


    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Hibernate (explicit)
    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    implementation "org.hibernate.orm:hibernate-envers:${hibernateVersion}"

    // QueryDSL (Jakarta-compatible)
    implementation "com.querydsl:querydsl-core:${querydslVersion}"
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0" // ✅ Required for annotation processor

    // Apache Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // Jakarta Persistence (for runtime, not just annotation processor)
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    // Keycloak
    implementation 'org.keycloak:keycloak-admin-client:25.0.0'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'

    // Dev tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //validation
    implementation 'javax.validation:validation-api:2.0.1.Final'




    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'junit:junit:4.13.2'
}
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}
checkstyle {
    toolVersion = '10.3'
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
}

pmd {
    toolVersion = "6.52.0"
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-empty',
            'java-strings',
            'java-unnecessary'
    ]
    //ruleSetFiles = files("config/pmd/pmd-ruleset.xml")
}

sonar {
    properties {
        property "sonar.projectKey", "timesheet-backend"
        property "sonar.projectName", "Timesheet Backend"
        property "sonar.projectVersion", "1.0"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "sqp_1d6f011f17dcb8801e26798e15278ec74aefd8d5"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
